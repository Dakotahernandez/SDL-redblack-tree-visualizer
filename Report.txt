Performance Analysis Report
1. Introduction
The Red-Black Tree is a self-balancing binary search tree designed to maintain efficient search, insertion, and deletion operations within logarithmic time complexity. This report evaluates the performance of a Red-Black Tree implementation, highlights design choices, and discusses its behavior under various datasets.

2. How the Red-Black Tree Works
The Red-Black Tree follows these core properties:
Node Colors: Nodes are either red or black.
Root Property: The root node is always black.
Red-Black Property: No two consecutive red nodes exist on any path.
Black-Height Property: All paths from a node to its descendant leaves have the same number of black nodes.
Balance Property: The longest path from the root to a leaf is at most twice the shortest path.
Balancing Operations:
Insertion: Nodes are added as in a binary search tree. Violations of Red-Black properties are resolved with rotations and re-coloring.
Deletion: Nodes are removed similarly, and balancing is restored using rotations and re-coloring.
These methods make sutr the tree remains balanced, supporting efficient O(log n) operations for search, insertion, and deletion.

3. Design Decisions
Templated Implementation:
THe templated Red_Black_Tree class supports various data types.
Duplicate values are inserted as separate nodes without additional modifications to visualization or logic.
Visualization Framework:
SDL (Simple DirectMedia Layer) is used for rendering real-time animations.
Custom graphical functions (drawCircle, drawLine, etc.) represent nodes, edges, and balancing actions dynamically.
Input Constraints:
The system accepts positive integers (up to 4 digits) to maintain clarity in visualization.
Modular Design:
Tree logic is separate from visualization logic for improved maintainability and debugging.(Object Oriented Programming in action)

4. Interface Description
Interactive Console Input:
Users input commands (I <number> for insertion, R <number> for removal) through the console.
Graphical Feedback:
The tree dynamically redraws after each operation, showcasing balancing changes 
Graphical Elements:
Smooth animations depict node movements and balancing operations.in

5. Performance Analysis
Datasets Used
Random Dataset: Randomly generated integers.
Increasing Order Dataset: Sequential integers in ascending order.
Decreasing Order Dataset: Sequential integers in descending order.
Metrics Analyzed
Tree Height: Maintained logarithmic growth across all datasets.
Time Complexity: Average and worst-case complexities for insertions and deletions.
Balancing Operations: Number of rotations and re-colorings performed.
Results Summary
Dataset
Tree Height
Avg. Time Complexity
Worst-Case Time Complexity
Rotations
Re-colorings
Random
Logarithmic
O(log n)
O(log n)
Moderate
Moderate
Increasing Order
Logarithmic
O(log n)
O(log n)
Higher
Higher
Decreasing Order
Logarithmic
O(log n)
O(log n)
Higher
Higher


6. Dataset Insights
6.1. Random Dataset
Example Dataset: 234, 1829, 981, 4506, 7398, 3051, 843, 6721, 1502, 8903
Performance: A well-balanced structure is achieved with moderate rotations and re-colorings. Average and worst-case complexities remain O(log n).
6.2. Increasing Order Dataset
Example Dataset: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
Performance: Initially forms a skewed tree, requiring significant balancing. Final structure achieves logarithmic height.
6.3. Decreasing Order Dataset
Example Dataset: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
Performance: Similar to the increasing order dataset, but requires even more balancing operations due to extreme initial skewing.
6.4. Edge Cases
Duplicate Dataset: (e.g., 500, 500, 1000, 1500, 1500, 2000, 2500)
Duplicates are inserted as separate nodes without distinction.
Performance: Balancing operations remain consistent with the standard logic.
Sparse Range Dataset: (e.g., 10, 1000, 20000, 30000, 40000, 50000, 60000)
Performance: Efficient handling of large numerical ranges, maintaining logarithmic height.

7. General Observations
Height Consistency: The tree consistently maintains logarithmic growth across all datasets.
Balancing Operations: Ordered datasets (increasing or decreasing) require more rotations and re-colorings compared to random datasets.
Efficiency: O(log n) complexity is sustained for all operations, showcasing the efficiency  of Red-Black Trees.

8. Challenges
During development, we encountered several challenges:
While creating the animations, I encountered three main issues: rendering triangles for the arrows, displaying text, and 
animating over previous frames. The first challenge I had was how to display the arrowheads for the arrows by calculating 
the other two vertices coordinate points given the two coordinate sets of the start and end of the arrow’s line. After 
researching and testing out many different mathematical equations, I finally was able to draw triangles of equal size, but 
then had to scale them back farther from the end point, which was the center of the circle and thus were covered. A second 
problem I faced was scaling text to be visually readable and appealing, and the amount of code this required. While 
implementing the method for drawing numbers a teammate created, I created similar functions to draw letters and characters. 
After essentially creating our own ASCII set of letters and numbers inline the class, the header file became very crowded 
and long with hundreds of extra lines, being both visually unappealing and impractical.  Moving these functions to a .cpp 
file was a bit difficult due to ‘template <typename T>’ coding standards and guidelines, but after explicitly defining 
parameter types at the bottom of the file I was able to move all the functions over to a file solely for these characters. 
Once I was able to display the text, each character was only 5*9 pixels and were very small, but this problem was resolved 
by adding a helper function to make each pixel equal to a 2*2 cube of pixels. This process required several tries, as my 
first attempts resulted in overlapping, blurry, distorted unreadable characters. Finally, the most difficult challenge I 
face while animating was how to animate over previously animated material. At first attempts using a function to erase 
previous frames by using white, this erased parts of the tree as well. Achieving smooth animations was relatively easy, but 
managing the screen elements updating required extra functions. I resolved this problem by asking my teammates for help and 
we got together as a group to physically draw out the problem and discuss solutions. This required redrawing the tree each 
time an overlapping frame movement occurred, but I had to implement a new tree drawing function, as calling the original 
occurred in an infinite loop with recursion, similarly we solved rotation animations by recursively drawing the tree each 
time a remove or major movement occurred.



9. Conclusion
This implementation demonstrates the efficiency of the Red-Black Tree, with its ability to maintain balance and handle duplicates seamlessly. The visualization shows  the tree's dynamic balancing properties, making it an excellent educational tool.

10. Future Enhancements
Enable mouse interactions for node insertion/removal.
Add performance metrics like memory usage and operation duration.
Allow users to upload custom datasets for advanced testing.
